@page "/counter"

@inject ICaptchaCallBackService callBackService
<h1>Counter</h1>

<p>Current count: @currentCount</p>
<GoogleRecaptcha></GoogleRecaptcha>
<button class="btn btn-primary" @onclick="IncrementCount" disabled="@Disabled">Click me</button>

@code {

    protected override void OnAfterRender(bool firstRender)
    {
        callBackService.SuccessCallBack += SuccessCallBack;
        callBackService.TimeOutCallBack+=TimeOutCallBack;

        base.OnAfterRender(firstRender);
    }

    private void TimeOutCallBack(object sender, CaptchaTimeOutEventArgs e)
    {
        Console.WriteLine("Captcha Time Out");
    }

    private void SuccessCallBack(object sender, CaptchaSuccessEventArgs e)
    {
        Disabled = false;

         base.StateHasChanged();
    }

    public void PostingToMyApi()
    {
        if (GoogleRecaptcha.IsCaptchaValidated())
        {
            //Posting to recaptcha
        }
        else
        {
            //Showing message that captcha is not valid
        }
    }

    private int currentCount = 0;

    private bool Disabled = true;

    private void IncrementCount()
    {

        currentCount++;
    }
}
